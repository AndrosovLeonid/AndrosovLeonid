scalar DateTime

type BatchPayload {
  count: Int!
}

enum UserDistinctFieldEnum {
  id
  login
  name
  group
  password
}

enum PostDistinctFieldEnum {
  id
  userId
  text
  title
}

enum SortOrder {
  asc
  desc
}

enum QueryMode {
  default
  insensitive
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  login: StringFilter
  name: StringNullableFilter
  group: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
}

input UserOrderByInput {
  id: SortOrder
  login: SortOrder
  name: SortOrder
  group: SortOrder
  password: SortOrder
}

input UserWhereUniqueInput {
  id: String
  login: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: StringFilter
  user: UserWhereInput
  userId: StringFilter
  text: StringNullableFilter
  title: StringFilter
}

input PostOrderByInput {
  id: SortOrder
  userId: SortOrder
  text: SortOrder
  title: SortOrder
}

input PostWhereUniqueInput {
  id: String
}

input UserCreateInput {
  id: String
  login: String!
  name: String
  group: String
  password: String!
  posts: PostCreateManyWithoutUserInput
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  group: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  group: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input PostCreateInput {
  id: String
  text: String
  title: String!
  user: UserCreateOneWithoutPostsInput!
}

input PostUpdateInput {
  id: StringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PostCreateWithoutUserInput {
  id: String
  text: String
  title: String!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  id: StringFilter
  userId: StringFilter
  text: StringNullableFilter
  title: StringFilter
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input UserCreateWithoutPostsInput {
  id: String
  login: String!
  name: String
  group: String
  password: String!
}

input UserUpdateWithoutPostsDataInput {
  id: StringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  group: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input PostUpdateWithoutUserDataInput {
  id: StringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyDataInput {
  id: StringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

type AggregateUser {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type User {
  id: String!
  login: String!
  name: String
  group: String
  posts: [Post!]!
}

input AuthUserInput {
  login: String!
  password: String!
}

input RegistrationUserInput {
  login: String!
  password: String!
  name: String
}

type AuthUserOutput {
  token: String!
  user: User!
}

type Query {
  user: User
  findOneUser(where: UserWhereUniqueInput!): User
  findFirstUser(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    cursor: UserWhereUniqueInput
    distinct: UserDistinctFieldEnum
    skip: Int
    take: Int
  ): [User!]
  findManyUser(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    cursor: UserWhereUniqueInput
    distinct: UserDistinctFieldEnum
    skip: Int
    take: Int
  ): [User!]
  findManyUserCount(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    cursor: UserWhereUniqueInput
    distinct: UserDistinctFieldEnum
    skip: Int
    take: Int
  ): Int!
  aggregateUser(
    where: UserWhereInput
    orderBy: [UserOrderByInput!]
    cursor: UserWhereUniqueInput
    distinct: UserDistinctFieldEnum
    skip: Int
    take: Int
  ): AggregateUser
  findOnePost(where: PostWhereUniqueInput!): Post
  findFirstPost(
    where: PostWhereInput
    orderBy: [PostOrderByInput!]
    cursor: PostWhereUniqueInput
    distinct: PostDistinctFieldEnum
    skip: Int
    take: Int
  ): [Post!]
  findManyPost(
    where: PostWhereInput
    orderBy: [PostOrderByInput!]
    cursor: PostWhereUniqueInput
    distinct: PostDistinctFieldEnum
    skip: Int
    take: Int
  ): [Post!]
  findManyPostCount(
    where: PostWhereInput
    orderBy: [PostOrderByInput!]
    cursor: PostWhereUniqueInput
    distinct: PostDistinctFieldEnum
    skip: Int
    take: Int
  ): Int!
  aggregatePost(
    where: PostWhereInput
    orderBy: [PostOrderByInput!]
    cursor: PostWhereUniqueInput
    distinct: PostDistinctFieldEnum
    skip: Int
    take: Int
  ): AggregatePost
}

type Mutation {
  registerUser(data: RegistrationUserInput!): AuthUserOutput
  authUser(data: AuthUserInput!): AuthUserOutput
  updateUser(data: UserUpdateInput!): User!
  createOneUser(data: UserCreateInput!): User!
  updateOneUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  upsertOneUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User
  deleteManyUser(where: UserWhereInput): BatchPayload
  updateManyUser(
    where: UserWhereInput
    data: UserUpdateManyMutationInput
  ): BatchPayload
  createOnePost(data: PostCreateInput!): Post!
  updateOnePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  upsertOnePost(
    where: PostWhereUniqueInput!
    create: PostCreateInput!
    update: PostUpdateInput!
  ): Post
  deleteManyPost(where: PostWhereInput): BatchPayload
  updateManyPost(
    where: PostWhereInput
    data: PostUpdateManyMutationInput
  ): BatchPayload
}

type Post {
  id: String!
  user: User!
  userId: String!
  text: String
  title: String!
}
